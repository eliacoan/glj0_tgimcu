-- title:  Tri gust is megl che uan
-- author: Elia Coan
-- desc:   Action tower defense
-- script: lua

w=240
h=136
t=0
state=0
score=0

sprites={
 soldier={0,0},
 rogue={2,0},
 mage={4,0},
	tower={6,0},
	spear={8,0},
	dagger={10,0},
	bubble={12,0},
	bat={0,2},
	crocodile={2,2},
	bear={4,2},
	city={6,2},
	blood={8,2},
	scratch={10,2},
	spark={12,2},
	scorpion={0,4},
	spider={2,4},
	wasp={4,4},
	portal={6,4},
	neckSoldier={8,4},
	neckRogue={10,4},
	neckMage={12,4},
	coin={0,8},
	ghost={0,6},
	monster={2,6},
	skull={4,6},
}
anims={
 fixed=-1,
 idle=0,
	walk=1,
	run=2,
	fly=3
}

p={
	x=100,
	y=100,
	dir='R',
	vs=0,
	hs=0,
	scale=1,
	angle=0,
 k=sprites.soldier,
	a=0,
	coins=0
}

es={}
ts={}
bs={}
cs={}
ns={}
portal={x=0,y=0,l=0,k=0}
city={x=w/2-8,y=h/2-8,l=100,k=sprites.city,scale=1,angle=0}

local 
 rnd,sin,cos,sqrt,abs,deg,rad,floor=
 math.random,math.sin,math.cos,math.sqrt,math.abs,math.deg,math.rad,math.floor
function chance(v)
 return rnd(100)<v
end
function pointsDistance(x1,y1,x2,y2)
 return sqrt((abs(x1-x2)^2)+(abs(y1-y2)^2))
end
function distance(p1,p2)
 return pointsDistance(p1.x,p1.y,p2.x,p2.y)
end
function collide(p1,p2)
 return distance(p1,p2)<10
end
function create(_x,_y)
 return {x=_x,y=_y}
end
function rspr(sx,sy,scale,angle,mx,my,mw,mh,k,useMap)
 local sv={{-1,-1,0,0},{1,-1,0.999,0},{-1,1,0,0.999},{1,1,0.999,0.999}}
	local rp={}
 local scalex=(mw<<2)*scale
 local scaley=(mh<<2)*scale
 for p=1,#sv do
  local _sx= sv[p][1]*scalex 
		local _sy= sv[p][2]*scaley
		local a=-angle
		local rx=_sx*math.cos(a)-_sy*math.sin(a)
		local ry=_sx*math.sin(a)+_sy*math.cos(a)
  sv[p][1]=rx+sx
  sv[p][2]=ry+sy
  sv[p][3]=(mx<<3)+(sv[p][3]*(mw<<3))
  sv[p][4]=(my<<3)+(sv[p][4]*(mh<<3))
	end
 textri(sv[1][1],sv[1][2],sv[2][1],sv[2][2],sv[3][1],sv[3][2],sv[1][3],sv[1][4],sv[2][3],sv[2][4],sv[3][3],sv[3][4],useMap,k)
 textri(sv[2][1],sv[2][2],sv[3][1],sv[3][2],sv[4][1],sv[4][2],sv[2][3],sv[2][4],sv[3][3],sv[3][4],sv[4][3],sv[4][4],useMap,k)
end

function init()
end

init()

function TIC()
 if t==0 then
	 newNecklace(w/2-24,h/2+8,sprites.neckSoldier)
		newNecklace(w/2-8,h/2+8,sprites.neckRogue)
		newNecklace(w/2+8,h/2+8,sprites.neckMage)
	end
	cls()
	update()
	draw()
 t=t+1
end

function update()
 if state==0 then
	 if keyp(48,50,50) then
			city.l=100
			state=1
			score=0
		end
 elseif state==1 then
	 if city.l<=0 then
		 es={}
			ts={}
			bs={}
			cs={}
		 state=2
		end
 	uPlayer()
	 uEntities()
	 uTowers()
 	uBullets()
 	uCoins()
 	uNecklaces()
 	uPortal()
	elseif state==2 then
	 if keyp(48,50,50) then
		 state=0
		end
	end
end

function uPlayer()
 p.a=0
	p.hs=0
	p.vs=0
	if btn(0) and p.y>10 then p.dir='U' p.vs=-1 p.a=anims.walk end
	if btn(1) and p.y<h-10 then p.dir='D' p.vs=1 p.a=anims.walk end
	if btn(2) and p.x>10 then p.dir='L' p.hs=-1 p.a=anims.walk end
	if btn(3) and p.x<w-10 then p.dir='R' p.hs=1 p.a=anims.walk end
 p.x=p.x+p.hs
	p.y=p.y+p.vs
	if keyp(63,30,30) then
	 local _bx=p.x
		local _by=p.y
		local _ba=0
	 if p.dir=='U' then _by=_by-8 _ba=180
  elseif p.dir=='D' then _by=_by+8 _ba=0
  elseif p.dir=='L' then _bx=_bx-8 _ba=270
  elseif p.dir=='R' then _bx=_bx+8 _ba=90
 	end
 	local _bk=sprites.spear
  if p.k==sprites.rogue then _bk=sprites.dagger end
  if p.k==sprites.mage then _bk=sprites.bubble end
		newBullet(_bx,_by,_bk,1.8,0.5,_ba,60,10)
	end
	if keyp(48,50,50) then
	 local _collided=-1
		for i=#ts,1,-1 do
		 if collide(p,ts[i]) then _collided=i end
		end
		if _collided~=-1 then
			newCoin(ts[_collided].x,ts[_collided].y,50+rnd(20))
		 table.remove(ts,_collided)
		else
 	 if p.coins>=100 then
 	  local _tx=p.x
 	 	local _ty=p.y
 	 	if p.dir=='U' then _ty=_ty-16
	  	elseif p.dir=='D' then _ty=_ty+16
	  	elseif p.dir=='L' then _tx=_tx-16
	 	 elseif p.dir=='R' then _tx=_tx+16
	  	end
	  	local _tb=0
	   if p.k==sprites.rogue then _tb=1 end
 	 	if p.k==sprites.mage then _tb=2 end
 	  newTower(_tx,_ty,_tb)
 	 	p.coins=p.coins-100
 	 end
		end
	end
end

function uEntities()
 table.insert(es,1,p)
 for i=#es,1,-1 do
	 local _e=es[i]
  if	_e.k~=sprites.soldier and _e.k~=sprites.rogue and _e.k~=sprites.mage and _e.a~=anims.fly then
		 if collide(_e,city) then
			 _e.a=anims.fly
				city.l=city.l-_e.h
			end
		 for j=#bs,1,-1 do
			 local _b=bs[j]
				if collide(_e,_b) then
					if _b.k==sprites.spear then
					 if _e.k==sprites.bat or _e.k==sprites.crocodile or _e.k==sprites.bear then
						 score=score+10
						 _e.l=_e.l-_b.h
						else
 						score=score+8
 						_e.l=_e.l-_b.h*0.8
						end
					elseif _b.k==sprites.dagger then
					 if _e.k==sprites.scorpion or _e.k==sprites.sprider or _e.k==sprites.wasp then
 						score=score+10
						 _e.l=_e.l-_b.h
						else
	 					score=score+8
 						_e.l=_e.l-_b.h*0.8
						end
					elseif _b.k==sprites.bubble then
					 if _e.k==sprites.ghost or _e.k==sprites.monster or _e.k==sprites.skull then
						 score=score+10
							_e.l=_e.l-_b.h
						else
						 score=score+8
 						_e.l=_e.l-_b.h*0.8
						end
					end
					table.remove(bs,j)
				end
			end
			if _e.hs<0 and _e.x<city.x+4 then _e.hs=0 
			 if _e.y>city.y then _e.vs=-0.5 else _e.vs=0.5 end
			end
	 	if _e.hs>0 and _e.x>city.x then _e.hs=0 
			 if _e.y>city.y then _e.vs=-0.5 else _e.vs=0.5 end
			end
	 	if _e.vs<0 and _e.y<city.y+4 then _e.vs=0 
			 if _e.x>city.x then _e.hs=-0.5 else _e.hs=0.5 end
			end
	 	if _e.vs>0 and _e.y>city.y then _e.vs=0
 		 if _e.x>city.x then _e.hs=-0.5 else _e.hs=0.5 end
			end
		end
		_e.x=_e.x+_e.hs
 	_e.y=_e.y+_e.vs
		if _e.l~=nil and _e.l<0 then _e.a=anims.fly end
		if _e.a==anims.idle then
		 if t%20==0 then
 	 	if _e.angle>0 then
	 		 _e.angle=-4
	 		else
	 		 _e.angle=4
	 		end	
			end	 
		elseif _e.a==anims.walk then
			if t%10==0 then
  	 if _e.angle>0 then
  		 _e.angle=-10
  		else
  		 _e.angle=10
  		end
  	end
		elseif _e.a==anims.run then
			if t%5==0 then
  	 if _e.angle>0 then
  		 _e.angle=-12
  		else
  		 _e.angle=12
  		end
  	end
		elseif _e.a==anims.fly then
		 if t%2==0 then _e.angle=_e.angle+20	_e.scale=_e.scale+1 end
			_e.x=_e.x+sin(rad(_e.angle))*8
			_e.y=_e.y+cos(rad(_e.angle))*8
			if _e.scale>10 then table.remove(es,i) end
		end
	end
	table.remove(es,1)
end

function uTowers()
 for i=#ts,1,-1 do
	 local _e=ts[i]
		_e.t=_e.t+1
		local _k=sprites.spear
		if _e.b==0 then
 		if _e.t%100==0 then
 		 newBullet(_e.x,_e.y,_k,1.8,0.8,0,100,20)
 			newBullet(_e.x,_e.y,_k,1.8,0.8,90,100,20)
 			newBullet(_e.x,_e.y,_k,1.8,0.8,180,100,20)
	 		newBullet(_e.x,_e.y,_k,1.8,0.8,270,100,20)
	 	end
		elseif _e.b==1 then
		 _k=sprites.dagger
 		if _e.t%120==0 then
 		 newBullet(_e.x,_e.y,_k,2,0.7,45,60,20)
 			newBullet(_e.x,_e.y,_k,2,0.7,135,60,20)
 			newBullet(_e.x,_e.y,_k,2,0.7,225,60,20)
	 		newBullet(_e.x,_e.y,_k,2,0.7,315,60,20)
	 	end
		elseif _e.b==2 then
 		_k=sprites.bubble
 		if _e.t%150==0 then
 		 newBullet(_e.x,_e.y,_k,1.5,0.6,t%360+180,120,20)
 			newBullet(_e.x,_e.y,_k,1.5,0.6,t%360,120,20)
	 	end
		end
	end
end

function uBullets()
 for i=#bs,1,-1 do
	 local _e=bs[i]
		_e.x=_e.x+sin(rad(_e.rotation))*_e.vs
 	_e.y=_e.y+cos(rad(_e.rotation))*_e.hs
		_e.angle=_e.angle+10
		if collide(_e,portal) then
		 portal.l=portal.l-_e.h
			score=score+10
			_e.t=0
		end
		if _e.t<=0 then
		 table.remove(bs,i)
		else
		 _e.t=_e.t-1
		end
	end
end

function uCoins()
 if t%100==0 and t>0 then
	 local _c=5
		if p.coins<100 and #cs<2 then
		 _c=70
		end
	 if chance(_c) then
		 newCoin(16+rnd(w-32),16+rnd(h-32),100)
		end
	end
	for i=#cs,1,-1 do
	 local _e=cs[i]
		if collide(_e,p) then
		 p.coins=p.coins+_e.value
			score=score+_e.value
			table.remove(cs,i)
		end
	end
end

function uNecklaces()
 for i=#ns,1,-1 do
	 local _e=ns[i]
		if collide(_e,p) then
		 if _e.k==sprites.neckSoldier then
 			p.k=sprites.soldier
			elseif _e.k==sprites.neckRogue then
 			p.k=sprites.rogue
			elseif _e.k==sprites.neckMage then
 			p.k=sprites.mage
			end
		end
	end
end

function uPortal()
 if portal.l>0 then
	 portal.l=portal.l-1
		portal.t=portal.t+1
		if portal.t>30 then
		 if portal.t%120==0 then
			 local _k=sprites.bat
				local _l=100
				local _h=10
			 if portal.k==0 then
				 if chance(50) then
					 _k=sprites.bat
						_l=50
						_h=10
					elseif chance(50) then
					 _k=sprites.crocodile
						_l=70
						_h=15
					else
					 _k=sprites.bear
						_l=90
						_h=20
					end 
				elseif portal.k==1 then
				 if chance(50) then
					 _k=sprites.spider
						_l=50
						_h=10
					elseif chance(50) then
					 _k=sprites.scorpion
						_l=70
						_h=15
					else
					 _k=sprites.wasp
						_l=90
						_h=20
					end 
				elseif portal.k==2 then
				 if chance(50) then
					 _k=sprites.ghost
						_l=50
						_h=10
					elseif chance(50) then
					 _k=sprites.monster
						_l=70
						_h=15
					else
					 _k=sprites.skull
						_l=90
						_h=20
					end 
				end
				newEntity(portal.x,portal.y,_k,0,_l,_h)
				local _hs=0
				local _vs=0
				if portal.x<city.x then
				 _hs=0.5
				else
				 _hs=-0.5
				end
				if portal.y<city.y then
				 _vs=0.5
				else
				 _vs=-0.5
				end
				if chance(50) then _hs=0 else _vs=0 end
				es[#es].hs=_hs
				es[#es].vs=_vs
			end
		end
	else
	 local _x=0
		local _y=0
		if chance(10) then
		 newCoin(portal.x,portal.y,10+rnd(50))
		end
		if chance(50) then
 	 if chance(50) then _x=6+rnd(4)	else _x=w-6-rnd(4) end
	  _y=8+rnd(h-16) 
		else
 		if chance(50) then _y=6+rnd(4)	else _y=h-6-rnd(4) end
	  _x=8+rnd(w-16) 
		end
		portal.x=_x
		portal.y=_y
		portal.k=rnd(4)
		portal.l=500+rnd(100)
		portal.t=0
	end
end

function draw()
	if state==0 then
 	cls(1)
	 print('TRI GUST IS MEGL CHE UAN',16,16,14)
		print('Move with arrows',16,32)
		print('Shoot with CTRL',16,40)
		print('Place towers with SPACE',16,48)
		print('Destroy towers with SPACE',16,56)
		print('Pray at the fires to change yourself',16,72)
		print('Knight is better with animals',16,80)
		print('Rogue is better with insects',16,88)
		print('Mage is better with monster',16,96)
		print('You lose when the city population is 0',16,112)
		print('Press SPACE to begin',16,h-16,8)
	elseif state==1 then
	 map()
 	cd(city)
 	print(city.l,city.x-8,city.y-14)
 	for i=#ns,1,-1 do
 	 cd(ns[i])
 	end
 	for i=#es,1,-1 do
 	 cd(es[i])
 	end
 	for i=#ts,1,-1 do
 	 cd(ts[i])
  end
	 for i=#bs,1,-1 do
	  cd(bs[i])
	 end
	 for i=#cs,1,-1 do
	  cd(cs[i])
	 end
	 cd({x=4,y=4,scale=1,angle=0,k=sprites.coin})
	 print(p.coins,10,2)
	 cd({x=portal.x,y=portal.y,scale=1,angle=0,k=sprites.portal})
  cd(p)
	elseif state==2 then
	 cls(1)
	 print('GAME OVER',16,16,14)
		print('Your score is '..score,16,32)
		print('Press SPACE to restart',16,h-16,8)
	end
end

function cd(_d)
 local _y=_d.y
	if _d.a==anims.run then
	 _y=_y+sin(t/2)*1.5
	elseif _d.a==anims.walk then
	 _y=_y+sin(t/5)*1.5
	end
 rspr(_d.x,_y,_d.scale,rad(_d.angle),_d.k[1],_d.k[2],2,2,1,false)
end

function newEntity(_x,_y,_k,_a,_l,_h)
 table.insert(es,{x=_x,y=_y,k=_k,a=_a,vs=0,hs=0,scale=1,angle=0,l=_l,h=_h})
end
function newTower(_x,_y,_k)
 table.insert(ts,{x=_x,y=_y,k=sprites.tower,a=anims.idle,vs=0,hs=0,scale=1,angle=0,t=0,b=_k})
end
function newBullet(_x,_y,_k,_s,_scale,_d,_l,_h)
 table.insert(bs,{x=_x,y=_y,k=_k,a=anims.fixed,vs=_s,hs=_s,scale=_scale,angle=_d,t=_l,rotation=_d,h=_h})
end
function newCoin(_x,_y,_v)
 table.insert(cs,{x=_x,y=_y,k=sprites.coin,a=anims.idle,vs=0,hs=0,scale=1,angle=0,value=_v})
end
function newNecklace(_x,_y,_k)
 table.insert(ns,{x=_x,y=_y,k=_k,a=anims.fixed,vs=0,hs=0,scale=1,angle=0})
end
-- <TILES>
-- 000:1111111111111188111118881111188811111811111118811111188111111111
-- 001:1111111188111811888118118881181111818181188111111881181111111811
-- 002:1111111111111111111111ee11e11eee11e11eee11e1ee1e11e11eee11e111ee
-- 003:1111111111111111ee111111eee11e11eee11e11e1ee1e11eee11e11ee111e11
-- 004:1111111111111999111199991111991111119111111191191111919111199199
-- 005:1111111199911111999911111199111111191111911911111919111199199111
-- 006:1111111111131113111333331111311111131113111333331113111311113311
-- 007:1111111131113111333331111113111131113111333331113111311111331111
-- 008:1111111111111111111111111111111111111111111111111111111111111111
-- 009:1111111111111181111188111111881181881111188811111881111181181111
-- 010:111111111111111111111111111111111111111111111111111111111111111e
-- 011:111111111111111111111111111ee11111eee1111eee1111eee11111ee111111
-- 012:1111111111991111199991111999911111991199111119991111999911119999
-- 013:1111111111191111191111111119911199199191999111119999191199991111
-- 016:1888888118111181181881811818818118188181181111811188881111111111
-- 017:8888181188881111111118818888188111811111118118111181181111111111
-- 018:11e1e11111e1eeee11111eee1eee111111e11eee1111111e11111e1111111111
-- 019:111e1e11eeee1e11eee111111111eee1eee11e11e111111111e1111111111111
-- 020:1199919911991919119919911199199111911991111919911111199111111111
-- 021:9919991191919911199199111991991119911911199191111991111111111111
-- 022:1111333311113133111131331113333311113331111311311111333111111111
-- 023:3333111133131111331311113333311113331111131131111333111111111111
-- 024:1111111811111181111118111111811111181111188111111881111111111111
-- 025:1111111111111111111111111111111111111111111111111111111111111111
-- 026:1111e1ee11111e1e11111ee1111ee11e111ee111111111111111111111111111
-- 027:e111111111111111111111111111111111111111111111111111111111111111
-- 028:1111999911919999111119991919919911199111111111911111911111111111
-- 029:9999111199991111999111119911991111199991111999911111991111111111
-- 032:1111111111111111111111111111111111111141111411441144444414444414
-- 033:1111111111111111111111111111111114111111441141114444441141444441
-- 034:1111111111111111111111111111144411144444114444441144411114444144
-- 035:1111111111444411111144414441144144441441444444411111441114411111
-- 036:1111111111144144111414441111444411114414111144441141441114441441
-- 037:1111111144144111444141114444111141441111444411111144141114414441
-- 038:1111111113333111131131311333313311111333133313331133111111111111
-- 039:1111111111133331131311313313333133311111333133311111331111111111
-- 040:1111111111111111111111111111111111111111116661111611161116111611
-- 041:1111111111666111161116116111116161111161611111611611161111666111
-- 042:1111111111111116116111111116611111166611111166611111166616111166
-- 043:1111111111111111661111116661111116661111116661111116661161116611
-- 044:1111111111111111111111111111111111116161111116111111616111111111
-- 045:1111111111111111611611611616161111666111666166611166611116161611
-- 048:1444444414444144141141441111114111111111111111111111111111111111
-- 049:4444444144144441441411411411111111111111111111111111111111111111
-- 050:1444444114444444114444441444444414441144114441141114441111111111
-- 051:4141414144444441444444411414141111111141444444111111111111111111
-- 052:1444411414444411144444441441444414411444144414441144141111111111
-- 053:4114444111444441444444414444144144411441444144411141441111111111
-- 054:1333311113113111133331311111133313331333113313311133133111111111
-- 055:1113333111131131131333313331111133313331133133111331331111111111
-- 056:1611161111666111111111161111111611111111111166111111661111111111
-- 057:1111111166111111116111111161111166111111111111111111111111111111
-- 058:1166111611666111111666111111666111111666111111661111111111111111
-- 059:6611116166611111166611111166611111166111111116116111111111111111
-- 060:1111111116161611111611111661661111161111161616111111111111111111
-- 061:6116116111111111116161111116111111616111111111111111111111111111
-- 064:1111111111555555155551151515111515111155111115111111155511155111
-- 065:1111111111111111511111115155111155115111115111115551111111155111
-- 066:1111111111151155115115551111511111111555115155511151555515111511
-- 067:1111111155115111555115111115111155511111155515115555151111511151
-- 068:1111111111111111115511151511515515111511151115551511151111511155
-- 069:1111111111111111511155115515115111511151555111511151115155111511
-- 070:1111111116111111166666661166666611111111111611161166666611111111
-- 071:1111111111111161666666616666661111111111611161116666661111111111
-- 072:1111111111111118111111111111111811111188111111811111111111111188
-- 073:1111111111111111811111118111111188111111181111111111111188111111
-- 074:111111111111111e111111111111111e111111ee111111e111111111111111ee
-- 075:1111111111111111e1111111e1111111ee1111111e11111111111111ee111111
-- 076:1111111111111119111111111111111911111199111111911111111111111199
-- 077:1111111111111111911111119111111199111111191111111111111199111111
-- 080:1151155511111515115551551555511115555111151151111151511111111111
-- 081:5551151151511111551555111115555111155551111511511115151111111111
-- 082:1115515511511555115115151151115511511515115111111115111111111111
-- 083:5515511155511511515115115511151151511511111115111111511111111111
-- 084:1115551111551155151511151115155511511511111111511111111111111111
-- 085:1155511155115511511151515551511111511511151111111111111111111111
-- 086:1116161111161166111611111166111111661111116611111166111111111111
-- 087:1161611166116111111161111111661111116611111166111111661111111111
-- 088:1111111111111118111111111111181811111811111118111111118811111111
-- 089:1111111111111111811111111181111181811111118111118811111111111111
-- 090:111111111111111e1111111111111e1e11111e1111111e11111111ee11111111
-- 091:1111111111111111e111111111e11111e1e1111111e11111ee11111111111111
-- 092:1111111111111119111111111111191911111911111119111111119911111111
-- 093:1111111111111111911111111191111191911111119111119911111111111111
-- 096:11111111111111aa11111aaa11111aaa11111a1a11111aaa111111a1111aaaa1
-- 097:11111111aa111111aaa11111aaa11111a1a11111aaa111111a1111111aaaa111
-- 098:11111111111111aa11111aaa11111aaa1111aa1a1111aaaa111aaa1111aaa111
-- 099:11111111aa111111aaa11111aaa11111a1aa1111aaaa111111aaa111111aaa11
-- 100:11111111111111aa11111aaa11111aaa11111a1a11111aaa1111111a111aaa11
-- 101:11111111aa111111aaa11111aaa11111a1a11111aaa11111a111111111aaa111
-- 102:1111111111999999191999991991999911119119111199991119911111199999
-- 103:1111111199999911999999919999999111111991999999911119191199999911
-- 104:1111111111111111119999991991999919199999191999991919999919111111
-- 105:1111111111111111999999119999199199999191999991919999919111111191
-- 106:1111111111999999199199991919999919111111199999991911111119111111
-- 107:1111111199999911999919919999919111111191999999911111119111111191
-- 112:11aaaaaa11a11aaa11a11aaa11aa1aaa11aa11aa111111aa1111111a11111111
-- 113:aaaaaa11aaa11a11aaa11a11aaa1aa11aa11aa11a1111111aa11111111111111
-- 114:11aaa1a11aa1aaaa1aa11aaa1aaa1aaa11aa1aaa11111a1111111a1111111111
-- 115:1a1aaa11aaaa1aa1aaa11aa1aaa1aaa1aaa1aa1111a1111111a1111111111111
-- 116:11aaaaaa11a1111a11a11aaa11aa111a11aa11aa11111a1111111a1111111111
-- 117:aaaaaa11a1111a11aaa11a11a111aa11aa11aa1111a1111111a1111111111111
-- 118:1119191111999999119999991191111111191999111919991111999911111111
-- 119:1111991199999111999991111111111199999991999999919999991111111111
-- 120:1999991119111119191999191919991119199999199111111199999911111111
-- 121:1199999191111191919991911199919199999191111119919999991111111111
-- 122:1999991119111119191999191919991119199999199111111199999911111111
-- 123:1199999191111191919991911199919199999191111119919999991111111111
-- 128:1111111111111111111111111111111111111111111111ee11111e1111111e1e
-- 129:1111111111111111111111111111111111111111ee1111111ee111111ee11111
-- 130:111111111111111111111111111111111111111111111eee1111e1111111eeee
-- 131:1111111111111111111111111111111111111111eee11111111e1111eeee1111
-- 132:1111111111111111111111111111111111111111111166611116666611166666
-- 133:1111111111111111166111116661111161111111166611116666611161166111
-- 134:1111111111111111111111111111111911111119119999991191111111911111
-- 135:1111111111111111111111119911111111911111111911111111911111111911
-- 144:11111e1e11111e11111111ee1111111111111111111111111111111111111111
-- 145:1ee111111ee11111ee1111111111111111111111111111111111111111111111
-- 146:11111e11111111e11111111e1111111111111111111111111111111111111111
-- 147:eee11111ee111111e11111111111111111111111111111111111111111111111
-- 148:1116666611166666111666661111666611116666111116611111111111111111
-- 149:6116611166666111666661116666111166661111166111111111111111111111
-- 150:1191111111911111119999991111111911111119111111111111111111111111
-- 151:1111191111119111111911111191111199111111111111111111111111111111
-- 160:1111111111111111111111161111111111111116111111161111116611111166
-- 161:1111111161111111111111116111111161111111611111116611111116111111
-- 162:1111111111111119111111111111111911111199111111911111111111111199
-- 163:1111111111111111911111119111111199111111191111111111111199111111
-- 164:1111111111111111111111161111161611116161111161661111611111111666
-- 165:1111111161111111111111116161111116161111661611111116111166611111
-- 176:1116166111111666116616611111116611166111116661161116111611111111
-- 177:6661611116611111666166116611111111166111611666116111611111111111
-- 178:1111111111111119111111111111191911111911111119111111119911111111
-- 179:1111111111111111911111111191111191911111119111119911111111111111
-- 180:1111611111116666111116661111611111116666111116661111111111111111
-- 181:1116111166661111666111111116111166661111666111111111111111111111
-- 192:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 193:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 194:bbbbbbbbb5bbbbbbb55bbbbbbb5bbbbbbbbbbbbbbbbbb5bbbbbbb55bbb5bbb5b
-- 195:bbbbbbbbb5bbbbbb55bbbb5b5bbbb55bbbbbb5bbbbb5bbbbbbb55bbbbbbb5bbb
-- 196:bbbbbbbbb7bbbbb7bbbb77bbbb7b77bbbbbbbbbbbbbb7b77b77bbb77b77bbbbb
-- 197:bbbbbbbbbbbbb7bbb777bbbbb777bb7bb777bbbbbbbbbbbbbb7bb77bbbbbb77b
-- 208:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 209:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 210:b55bbbbbb5bbbbbbbbbbbbbbbbbbbb5bb5bbbb55b55bbbb5bb5bbbbbbbbbbbbb
-- 211:bb5bbbbbb55bb5bbb5bbb55bbbbbbb5bbbbb5bbbbbb55bbbbbb5bbbbbbbbbbbb
-- 212:bbbb777bbbbb777bb7bb777bbbbbbbbbbb777bbbbb777bbbbb777bbbbbbbbbbb
-- 213:b77bbbbbb77b7bbbbbbbbbbbb7bbbb7bbbb77bbb7bb77bbbbbbbbbbbbbbbbbbb
-- </TILES>

-- <MAP>
-- 000:4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:4c5c4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:4d5d4c2c3c2c3c2c3c2c3c2c2c3c5d5d5d2c3c2c3c2c3c2c3c2c3c4c4c5c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:4c5c2c2c3c2d3d2d3d2d3d2d2d2c3c3c2c3c3d2d3d2d3d2d3d2c3c3c4d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:4d5d2d2d3d0c1c1c0c1c0c1c0c2d3d3d2d3d0c1c0c0c1c0c1c2d3d3d4c5c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:4c5c2c3c1c0d1d3c0d1d0d1d0d1d0d1d0d1d0d1d0d0d1d0d1d1d2c3c4d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:4d5d2d2c3c1d0c0c0c1c0c1c0c1c0c3c0c1c0c1c0c3c0c0c0c1c2c3c4c5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c
-- 007:4c5c5d2d3d1d0d0c0d1d0d1d0d1d0d1d0d0c1c0c0c0c0d0c0d2c2d3d4d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d
-- 008:4d5d5d2c3c1c0c0c0c1c0c1c0c0c1c0c1c0d1d0c0c0c0c1c0c2d3d5d4c5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c
-- 009:4c5c2c2d3d1d0d1d0d3c0d1d0d0d1d0d1d0c1c0c1c0c0c0c0d2c3c5d4d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d
-- 010:4d5d2d3d0c1c0c0c0c1c0c1c0c1c0c0c0c0d1d3c1d0c0c0c1c2d3d3c4c5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c
-- 011:4c5c2c3c0d1d0d0c0d1d0c0c0d1d0d0c0c0d1d0c0c0c0c0c0c1c2d3d4d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d
-- 012:4d5d2c2c3c0c1c0c1c0c1c0c2c3c3c2c3c0c0c0c0c0c0c0d0d2c3c3c4c5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c
-- 013:4c5c2d2d3d2c3c2c3c2c3c2c2d3d3d2d2c3c2c3c2c3c2c3c2c2d3d3d4c5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d
-- 014:4d5d4c2d3d2d3d2d3d2d3d2d3d5d5d5d2d3d2d3d2d3d2d3d2d2d3d4c4d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c
-- 015:4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c4c5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d
-- 016:4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d4d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <PALETTE>
-- 000:140c1c44243430599989cace854c30348d24d046487571610099ffff2cff8595a1384440d269996dc2cadad45edeeed6
-- </PALETTE>

-- <COVER>
-- 000:f7f000007494648393160f00880077000012ffb0e45445353414055423e2033010000000129f40402000ff00c2000000000f00880078834404571716ad4de5edee6d43d8420d648498acec0099ffffc2ffff001080c1840b0a1c388031a2c58c0b1a3c780132a4c9841b2a2c005013214d80083a04f8d17028c192233a9cf872b42acd892942bc59a236ab4999216ec4b953342ccd9a3b72f4e873d7200104450c7c003029a1c0004992247a7414a8c6a25f8e4daad19ae35da701a665cae599285eab49c6643bb11de4dbab59d6143ac4986745aa4156858a043babdcb77532f5eaf77f69ceb83907f4c8683074d2c0870736bbf8346267c2850a1dbc0739e0000b931a8d68f99168e583af2a753d85fc6ae4bbadd29e3de916f6d6db854bcebc34d827eecd992396dbfb56f250e7198b763ef4197755e3c58b947ec21abfe2e2d12b76dd9bf3a66fbd4752edeea3fbfaffd0fcd7c7972e87da2a7fbaefea7f3f0cfcbb72fae3e7b70f2f1ffd73fbfbdfdf2a8d997ba9871b5d7d51c770a1856928761389693820a96016f7d61371161861e486b128aad481a147f16a6126c6c12b6e121870698b798882695a26d6026b8f35e4f595555d8873a8793697b3ad892af8e2209d1ae5d3219f3a191422934a355423974a39b06d6a25963c5d87c9599c169bc9695525972979f218935a47cdd0825e6926eb766279dc546b52f453da907eb4376c4245c95c9d9556d9b39c9772d9f7ad9e7e0a8a529f0a98d022a78ab63e13aa0a790b14a329c61925a39a455926a79649e822729e2746685f8a8ae929a99e89342d7a82783a1ba6ae6afe5affaea6e55a2da7a6cabaa183f1c796a2a58e680a557762981c2d6c6e19fa91bdb67a8c26851a540d64b2de4b4d65b6d24b32e5bade6bfc63aed27b0e68bf42260868440c147ea149e614be214dee04fea041f2003f6db8e628e1149242db7faabdf2bbffabb103cb30fc8149da2c21740cbbb0b0c4f23cde6abd0bbb11bcb01b3c3135cce65c2d66c6136c7131cf0f6c0239c22b7c32b8cfdea7ac2d988974c0b6c2f20c0feab137dca2fcc83bec437ec317ebd760dc3f0d91fdcf1f0dcfeec94bfc637fc92b4604f463c668f0dcb8095d5072485b34fea5ac9634b5b3db058de038d3194a8038a0291def69dd67ec2636d6fabdcb6d7f22bd17b6d26bbdb4fbffd84f4705ffa21a28e13aca4f3d62f1dae64c65b1e5839d41d3e7533e39bccb8b5e9832eeedeaa167ba23edd43fd1a3cd3a32d3a79ed777c4a7fc0afae567be6af2ab2bce2ea2ec732e073eef7b3e0938b1fa1e9abee1c30fdbf9d23a0533dcdb770f923ae74b3fdc7eeccb2f7bf4f8ea4c2df4c0db6f9d36ff7b5f4ca29b8259cb76eb5bdc7ef1ef630f3678c3371e6b32eedb0ff97af1f3be21bbfcf2cf4e5b6f27560e36a56d8a79db10efb8d6d03ac5ce4d7fd320630d08b0cf89203b4c7a36944a47cf32a17c438e63acd40512e04db93de38b149f570b48c01aed7aad4663fb5ae23829baf16e0d733431a8e2b611c91e60368c33e1e2d8d787bfb5baff475af15e49f4d7d83716ee298bcb3fd70fe76b37c92177775b9223f2a8fbbea90b245f9be265fa67aabc1abee58064861ae248019c616e0a85cb2324488750383ab1b2227c5e9440745dba7dcf6e866cbe5f07e7a7cfe1f1148e7cf1ecfe06362365b09e738ce3e3f818fab636327d7084d223b6f4f7a01a4272922c6224093955bf4eff064d9a3d870b680ac8c1a2748bac45672d68674f59490140f381e62d590bc326411298bc3c1d033708334112da87bce52317f67cce5651f396736f05d4990dc86a4353490b96a53fa939453ae929783474263fb97d2432c88c5c922f9efa896e307aa3dc87e45350722380447e907d94f455ec3fa451c56951db95fffce76817a62c915e8d26961197af39e914c12a1783764c7267cc0a519abce6a73a9938e4bc78614ad52ae78405a3e02b2abb9092d5a7361db0e81922ad482694312579a8e66c5ab25862e1b08bf4576b4973125ecc51bc801d05e4111920920c4d000245da5b39e9a91ed844b2a914036353c974d64159a0045daaa55daa70c116f47a9e0d07575ba51fc9ec7860275d2b615bf6cebe86c4fb8c350568d0d68a2f56ed6dab8c64e65d7a2db0c976a00a11aa29590a815a7a1060b60038016b0ba257aed51c6f1468a75cca75d41e94be988d2c65610079dcb6b55c5764d8a76f5379ba9283f0b8952c69670b47daa98335a1211aa05bfa44dee0cca09b8d64ffe1615b9ad7567f488a32380f53006556ac95322fb4ac2a6f6b695cd6e697949477e54e7b7597da0dc39ef45e614cabbc5142d4928d31fb2b6cbbed2216677cb8758520414245518215b8a4bcd16d6dd84adbea969cb19caf6ea61aedd4f4a770addc1da0401b409cc2d75179cc1a6640cb509dfe081124adbc6c79cb0dbb61b6ba9bc54ee289d8f5ba8cc47f52ec57a96d2c3fd1f602796af24e5b4c0c02c8aa17b4bffd4ee58b9b6b9b42e9c72c190b657d5cc26cee087e6043be092fcb916efeb837b2edd868feebfaa56a6678c525b56c5f93302a0b157d81dc30c34204b0140ca5b0cfca4fc33fd839596a59d128565886999c902761b3bfbdbc30c899ff1227968020eccf2e8159808a10499db75da90173bb91ec54168cc97ecd4eca598754f723c0371f7cda7ae246ccf6e488e6acc609333d9df982374789aa320d1ba67f18bdafa2a99a563ee13773ac6ca22b35322e7e8432400428e14fe8d8cc6a08e79d096f5ece8add8c6b95d397d38b2bc179b1d7b475b2482d809b47c430bdc2fcd6432c39c26a1b52df015636a3cc2d26d6d19e965684f1b78269133300c2d61dd6b5b63c3dbd3e73dbd3de18c4a1cd90127b5bbcb38c1134f0fc56239626bac4096778bddd2ee18ccb91bc6d932d0f9aa8ec3dc9a3c556f330a3ec66695bd37fd5b3b7d40b3de5ea5fc65eabbea87dbb59507d87ad83ec8ce8f543adeeff5b2aa7589abd52b9cf1a1d65236ec1ba8c793e27fc1aefc67ec6ec3f4177372c939a13b9b7e446ad629e0ddcc5b9a898ef2ef56eb9a30f4da23db9edf53573b52b3571138c75805eabee41c9daeca712ff82b2222f7a1a456576baffcefee93795f9c5ce12f95ccb67004bd5ce5d26d29732ddd6bb3ed3c58e6d4ea3ffc67f13b0e54bfdc3c70df4c915dd56a1580d42cff990019e371ffe1f1279626e9068075bcb9a7240415fdc9d5f6e40a0b5aedfc0be5c956631fa1f359957f0b79e78ee2f3823c1ea1c6ae6de939f6ee6b3c14d303c9b1c57fd5f3231cdc72cf865fdd0f9e273be219fbc678a7c86e3193d16b179bcf2c3bddac1afbe383b3be7b8bfffb13b84b7ed71e92f3013c7c139f6755cf9d61f0c7d3f673f8cccc99afb7f4f25ff323ef3ffef3fffff9e64674260f73e3256c868b3797745b97a33e131679e79f7bf7527b089433189f39e4808c139657085c5947c24f364c7e542049345438a7f57976bd5636464a43928c282464f7e366528a6257aa6e573c45385289762a7bb7f963776284385b7262b27534e461c7ab52731b4c18c18854734c65144ed7e48208158094248255ec4e51864273f55cc62f3d83116e04e44967c58593cb4b584285f74d74536086380b3a28128114ce70e7e68d68c684783d22e73e4c53f58a78be7c78a44ea7a156e62c34e7a44188fc7b388863b1bf24216f6bb5c151aff5bd3084647a884e4c16298108e88623098277354cd3332886d36af4fc4a48708a46a183a89b6ad27a8234d946a8b865a8694ec5964e23612ee7ef77280089e20a81625e28b85f7db8c98ff2458082a612c24386c8da47c8427b23f788655249c8bb4228443a13f389884b6a056b6e414480d8268ba8bd8e345c55738e1602ad89b4aa6fd8eb45134e8eb17d80b23830c1c560f8237284fb32f8ff48c45f81f81748340b81f1a68ee8f77627ef80093090e28f64086095e24b2bd4b093b8909c09431e09e98019f09809419709408558361794907508a19606c19919d56ec1029d18966614429ca76291484c8929a81138265917817ec4a75f29038e9643973ff9239c81004a39781d29039339d39e29939f396c76495d89c25c2a490c2c49949d492830597497573594397c1b54f562c81d14b19591c4a632a1859069759269b59169c22767822e56869658cb2b69dc48b2868079544a69f69279c69479769679aa21798794d4f22412966177189156d79489968e79df8383289989389689b42c22e79a778785d86767220997c38883e21e3499912199138f89599bf2f98999d42498882847e99986db57475a92a9ba99a9c323a91b9ea94a9436826df3972db2f479529b96b9ab9862462db91c9d87eb9d520c93c96b97a6a071823d5f974828f4bc95b9fc9ec99c92d9ac93d9dc96d95a4de8fd2c570462b45b2916dd9a19479a2cd9cc83e9fd97b24b32e9be9946846de8eb69b78520f9aa2ea13f96f93a23275f98f9fb62f9bf91f9ce84e9259c2784915940a20a10a60a90a45980ab0afd9d0a40901a5d2101000b3
-- </COVER>

